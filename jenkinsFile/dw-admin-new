pipeline {
    agent any
    environment {
        code_url="zs_framework/trunk/zs-server"       //主版本 
        // code_url="zs_framework/branches/20220428/zs-server"    //分支版本 
        project="dw-admin"    //项目名称，杀进程、包名 均是，如不一致请更改
        source="dw-admin"     // sourceFiles、removePrefix 一般一样，如不一致请更改  
        dir="hw/"             //上级目录是/data/,即当前是 /data/hw
    }
    
    parameters{
        extendedChoice( name: 'servers', type: 'PT_CHECKBOX', description: '服务器', value: '19,30', defaultValue: '19,30')
        extendedChoice( name: 'step', type: 'PT_CHECKBOX', description: '执行步骤(不选则顺序执行全部)', value: '停止,启动')

    }
    
    stages {
        
        stage('检出代码') {
            steps {
                script{
                    if(! "${params.step}" ) {
                        checkout([$class: 'SubversionSCM', locations: [[credentialsId: "$svn_auth", local: '.', remote: "$svn_address/$code_url"]]])
                    }
                }
            }
        }
        
        stage('打包') {
            steps {
                script{
                    if(! "${params.step}" ) {
                        sh 'mvn clean package'
                    }
                }
            }
        }

        
        stage('停止项目') {
            steps {
                script{
                    if("${params.step}" =~ "停止" || ! "${params.step}" ) {
                        for (host in servers.tokenize(',')) {
                            sshPublisher(publishers: [sshPublisherDesc(configName: "$host", transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: """ 
                            ps -ef | grep ${project}.jar  |grep -v grep | cut -c 9-15 | xargs kill -s 9""", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                        }
                    }
                }
            }
        }
        
        stage('更新文件') {
            steps {
                script{
                    if(! "${params.step}" ) {
                        for (host in servers.tokenize(',')) {
                            sshPublisher(publishers: [sshPublisherDesc(configName: "$host", transfers: [sshTransfer(execCommand: """cd /data/$dir 
                            mv  ${project}-0.0.1-SNAPSHOT.jar  ${project}.jar""", patternSeparator: '[, ]+', remoteDirectory: "$dir", removePrefix: "$source/target", sourceFiles: "$source/target/*.jar")])])
                        }
                    }
                }
            }
        }
        
        stage('启动项目 ') {
            steps {
                script{
                    if("${params.step}" =~ "启动" || ! "${params.step}" ) {
                        for (host in servers.tokenize(',')) {
                            sshPublisher(publishers: [sshPublisherDesc(configName: "$host", transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: """source /etc/profile 
                             cd /data/$dir 
                             >logs/${project}.out 
                             nohup java -Xms512m -Xmx2g -jar ${project}.jar --spring.profiles.active=test>> /data/$dir/logs/${project}.out &""", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                        }
                    }
                }
            }

        }
    
    
    }    
        
}
